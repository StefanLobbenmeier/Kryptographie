package multipletimepad;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

public class MultpleTimePadMain {
	byte[] chiffrat1 = new byte[] { 0x19, 0x0e, 0x4f, 0x47, 0x1d, 0x07, 0x4e, 0x10, 0x05, 0x0a, 0x54, 0x1f, 0x0a, 0x00,
			0x53, 0x07, 0x54, 0x12, 0x1b, 0x1a, 0x16, 0x44, 0x49, 0x19, 0x41, 0x0f, 0x19, 0x10, 0x1e, 0x13, 0x4f, 0x01,
			0x1b, 0x17, 0x15, 0x48, 0x14, 0x49, 0x0d, 0x17, 0x16, 0x00, 0x03, 0x41, 0x00, 0x41, 0x12, 0x45, 0x0e, 0x48,
			0x02, 0x0b, 0x4e, 0x16, 0x1a, 0x04, 0x54, 0x1e, 0x0e, 0x1d, 0x00, 0x5e, 0x49, 0x19, 0x1a, 0x1d, 0x0e, 0x52,
			0x36, 0x1d, 0x16, 0x4e, 0x1d, 0x47, 0x4e, 0x02, 0x0b, 0x1c, 0x07, 0x59, 0x44, 0x1d, 0x45, 0x19, 0x0b, 0x0b,
			0x00, 0x1a, 0x06, 0x1a, 0x49, 0x00, 0x11, 0x0f, 0x00, 0x53, 0x59, 0x45, 0x61, 0x10, 0x4f, 0x02, 0x42, 0x15,
			0x53, 0x1f, 0x4e, 0x1b, 0x1f, 0x49, 0x04, 0x48, 0x0e, 0x17, 0x1c, 0x00, 0x1d, 0x1b, 0x45, 0x4c, 0x07, 0x0b,
			0x0b, 0x4c, 0x45, 0x1d, 0x07, 0x10, 0x47, 0x01, 0x5d, 0x00 };

	byte[] chiffrat2 = new byte[] { 0x1d, 0x57, 0x07, 0x41, 0x1b, 0x03, 0x00, 0x1c, 0x07, 0x10, 0x53, 0x12, 0x18, 0x1d,
			0x01, 0x1f, 0x01, 0x53, 0x30, 0x01, 0x06, 0x00, 0x04, 0x0f, 0x4b, 0x06, 0x52, 0x0d, 0x18, 0x11, 0x4f, 0x05,
			0x17, 0x05, 0x03, 0x44, 0x59, 0x59, 0x0e, 0x07, 0x45, 0x44, 0x0d, 0x41, 0x10, 0x48, 0x0e, 0x45, 0x1d, 0x49,
			0x14, 0x0d, 0x0b, 0x16, 0x52, 0x00, 0x1a, 0x0d, 0x4f, 0x1d, 0x49, 0x55, 0x00, 0x0c, 0x01, 0x0a, 0x54, 0x1a,
			0x16, 0x55, 0x1f, 0x08, 0x1a, 0x02, 0x52, 0x4b, 0x1c, 0x16, 0x06, 0x00, 0x01, 0x0f, 0x56, 0x0a, 0x4e, 0x11,
			0x4f, 0x54, 0x1a, 0x19, 0x04, 0x52, 0x04, 0x41, 0x05, 0x1f, 0x42, 0x00, 0x2e, 0x02, 0x45, 0x1e, 0x45, 0x00,
			0x14, 0x15, 0x49, 0x1a, 0x46 };

	byte[] chiffrat3 = new byte[] { 0x15, 0x57, 0x1c, 0x54, 0x00, 0x05, 0x4b, 0x16, 0x1a, 0x0a, 0x4b, 0x12, 0x1d, 0x52,
			0x06, 0x06, 0x47, 0x16, 0x0d, 0x4e, 0x1e, 0x45, 0x49, 0x1a, 0x4f, 0x43, 0x10, 0x0c, 0x09, 0x54, 0x0e, 0x47,
			0x01, 0x15, 0x1f, 0x0b, 0x12, 0x00, 0x15, 0x1a, 0x04, 0x54, 0x42, 0x16, 0x0b, 0x55, 0x07, 0x01, 0x59, 0x54,
			0x15, 0x0c, 0x1e, 0x09, 0x17, 0x41, 0x1d, 0x1d, 0x1c, 0x4e, 0x56, 0x4c, 0x4c, 0x14, 0x0b, 0x44, 0x45, 0x04,
			0x00, 0x07, 0x0a, 0x49, 0x17, 0x02, 0x41, 0x19, 0x4b, 0x59, 0x3a, 0x00, 0x1d, 0x01, 0x4c, 0x0b, 0x4e, 0x0d,
			0x49, 0x19, 0x45, 0x4d, 0x42, 0x61, 0x04, 0x41, 0x09, 0x0a, 0x0e, 0x41, 0x26, 0x11, 0x0c, 0x4c, 0x2c, 0x41,
			0x17, 0x1b, 0x4e, 0x53, 0x1c, 0x49, 0x16, 0x56, 0x0e, 0x0b, 0x59, 0x42, 0x1c, 0x0a, 0x00, 0x0b, 0x1d, 0x0b,
			0x02, 0x4e, 0x45, 0x0c, 0x0e, 0x1b, 0x06, 0x06, 0x4f, 0x5d, 0x00 };

	private final ArrayList<Character> possibleValues;

	public static void main(String[] args) {

		final MultpleTimePadMain main = new MultpleTimePadMain();

//		for (int i = 0; i < 1; i++) {
//			System.out.println(main.getPossibleKeys(i));
//		}

		System.out.println(main.getPossibleKeys(0));
	}

	public MultpleTimePadMain() {
		possibleValues = new ArrayList<>();

		for (char c = 'a'; c <= 'z'; c++) {
			possibleValues.add(c);
			possibleValues.add(Character.toUpperCase(c));
		}

		possibleValues.add('!');
		possibleValues.add('.');
		possibleValues.add(',');
		possibleValues.add('?');
		possibleValues.add(' ');
	}

	private Set<Byte> getPossibleKeys(int i) {
		final byte x12 = (byte) (chiffrat1[i] ^ chiffrat2[i]);
		final byte x13 = (byte) (chiffrat1[i] ^ chiffrat3[i]);
		final byte x23 = (byte) (chiffrat2[i] ^ chiffrat3[i]);

		final var possibleKeysAtPosition1 = new HashSet<Byte>();
		final var possibleKeysAtPosition2 = new HashSet<Byte>();
		final var possibleKeysAtPosition3 = new HashSet<Byte>();

		for (final Character c : possibleValues) {
			if (isValid(x12, c) && isValid(x13, c)) {
				possibleKeysAtPosition1.add((byte) (c ^ chiffrat1[i]));
				System.out.printf("%d %c %02X %n", 1, c, (c ^ chiffrat1[i]));
			}
			if (isValid(x12, c) && isValid(x23, c)) {
				possibleKeysAtPosition2.add((byte) (c ^ chiffrat2[i]));
				System.out.printf("%d %c %02X %n", 2, c, (c ^ chiffrat2[i]));
			}
			if (isValid(x13, c) && isValid(x23, c)) {
				possibleKeysAtPosition3.add((byte) (c ^ chiffrat3[i]));
				System.out.printf("%d %c %02X %n", 3, c, (c ^ chiffrat3[i]));
			}
		}

		System.out.println(possibleKeysAtPosition1);
		System.out.println(possibleKeysAtPosition2);
		System.out.println(possibleKeysAtPosition3);

		possibleKeysAtPosition1.retainAll(possibleKeysAtPosition2);
		possibleKeysAtPosition1.retainAll(possibleKeysAtPosition3);

		return possibleKeysAtPosition1;
	}

	protected boolean isValid(byte x12, Character c) {
		return possibleValues.contains(Character.valueOf((char) (x12 ^ c)));
	}

}
